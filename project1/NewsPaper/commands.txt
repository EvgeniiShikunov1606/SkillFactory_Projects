user_1 = User.objects.create_user('user_1')                     
user_2 = User.objects.create_user('user_2')
author_1 = Author.objects.create(user=user_1)
author_2 = Author.objects.create(user=user_2)
categories = ['Кулинария', 'Спорт', 'Музыка', 'Образование']
from news.models import Category
for name in categories:
...     Category.objects.create(name=name)
music = Category.objects.get(name='Музыка') 
food = Category.objects.get(name='Кулинария')
post_1 = Post.objects.create(author=author_1, type=Post.ARTICLE, title='Статья №1', text='Мои поздравления, это первая статья!')
post_1.categories.add(music, food)
post_2 = Post.objects.create(author=author_2, type=Post.ARTICLE, title='Статья №2', text='Вторая статья!')  
post_2.categories.add(food)  
news_1 = Post.objects.create(author=author_1, type=Post.NEWS, title='Новость №1', text='Первая новость!') 
news_1.categories.add(music) 
Comment.objects.create(post=post_1, user=user_1, text='Комментарий №1')        
Comment.objects.create(post=post_2, user=user_2, text='Комментарий №2') 
Comment.objects.create(post=news_1, user=user_1, text='Комментарий №3') 
Comment.objects.create(post=news_1, user=user_2, text='Комментарий №4') 
post_1.like()
post_2.dislike()
news_1.like()
news_1.dislike()
comment_1 = Comment.objects.first()
comment_1.like()
author_1.update_rating()
author_2.update_rating()

best_author = Author.objects.order_by('-rating').first()
print(f"Лучший пользователь: {best_author.user.username}, рейтинг: {best_author.rating}")
Возвращен ответ: Лучший пользователь: user_1, рейтинг: 5

best_post = Post.objects.order_by('-rating').first()
print(f"Лучшая статья: {best_post.created_at}, {best_post.author.user.username}, {best_post.rating}, {best_post.title}, {best_post.preview()}")
Возвращен ответ: Лучшая статья: 2024-11-18 08:27:03.443000+00:00, user_1, 1, Статья №1, Мои поздравления, это первая статья!...

comments = best_post.comment_set.all()
for comment in comments:
...     print(f"Дата: {comment.created_at}, Пользователь: {comment.user.username}, Рейтинг: {comment.rating}, Текст: {comment.text}")
Возвращен ответ: Дата: 2024-11-18 08:34:21.345426+00:00, Пользователь: user_1, Рейтинг: 1, Текст: Комментарий №1

python manage.py makemigrations - сделать миграции
python manage.py migrate - выполнить саму миграцию
python manage.py update_translation_fields - обновить поля переводов (обязательно после миграций перевода)
django-admin makemessages -l <код страны> - для перевода языка
python manage.py compilemessages - применить перевод (обязательно после внесения перевода)


